/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Resume as PrismaResume,
  Application as PrismaApplication,
  User as PrismaUser,
} from "@prisma/client";

export class ResumeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ResumeCountArgs, "select">): Promise<number> {
    return this.prisma.resume.count(args);
  }

  async resumes<T extends Prisma.ResumeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ResumeFindManyArgs>
  ): Promise<PrismaResume[]> {
    return this.prisma.resume.findMany<Prisma.ResumeFindManyArgs>(args);
  }
  async resume<T extends Prisma.ResumeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ResumeFindUniqueArgs>
  ): Promise<PrismaResume | null> {
    return this.prisma.resume.findUnique(args);
  }
  async createResume<T extends Prisma.ResumeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ResumeCreateArgs>
  ): Promise<PrismaResume> {
    return this.prisma.resume.create<T>(args);
  }
  async updateResume<T extends Prisma.ResumeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ResumeUpdateArgs>
  ): Promise<PrismaResume> {
    return this.prisma.resume.update<T>(args);
  }
  async deleteResume<T extends Prisma.ResumeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ResumeDeleteArgs>
  ): Promise<PrismaResume> {
    return this.prisma.resume.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.resume
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.resume
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
